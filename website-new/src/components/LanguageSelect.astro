---
import { type Language } from '../utils/i18n';

interface Props {
  lang?: Language;
}

const { lang = 'es' } = Astro.props;

const languageOptions = [
  { code: "es", name: "Español", flagCode: "ES" },
  { code: "en", name: "English", flagCode: "GB" },
  { code: "de", name: "Deutsch", flagCode: "DE" },
  { code: "it", name: "Italiano", flagCode: "IT" },
  { code: "fr", name: "Français", flagCode: "FR" },
  { code: "pt", name: "Português", flagCode: "PT" },
  { code: "zh", name: "中文", flagCode: "CN" },
  { code: "ja", name: "日本語", flagCode: "JP" },
  { code: "ko", name: "한국어", flagCode: "KR" },
];

const currentLang = languageOptions.find(opt => opt.code === lang) || languageOptions[0];
---

<div class="relative" id="language-select">
  <button
    id="language-button"
    class="flex items-center gap-2 px-3 py-2 bg-zinc-100 dark:bg-zinc-800 hover:bg-zinc-200 dark:hover:bg-zinc-700 rounded-md transition-colors text-sm font-medium text-zinc-700 dark:text-zinc-300"
    type="button"
  >
    <img
      src={`https://flagcdn.com/w20/${currentLang.flagCode.toLowerCase()}.png`}
      alt={currentLang.name}
      width="20"
      height="15"
      class="rounded-sm"
    />
    <span class="hidden sm:inline">{currentLang.name}</span>
    <svg
      class="w-4 h-4 ml-1 transition-transform"
      id="language-arrow"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 9-7 7-7-7"></path>
    </svg>
  </button>

  <div
    id="language-dropdown"
    class="absolute right-0 mt-2 w-48 bg-white dark:bg-zinc-800 rounded-md shadow-lg border border-zinc-200 dark:border-zinc-700 z-50 opacity-0 invisible transform scale-95 transition-all duration-200"
  >
    <div class="py-1">
      {languageOptions.map((option) => (
        <button
          class={`w-full px-4 py-2 text-left flex items-center gap-3 hover:bg-zinc-100 dark:hover:bg-zinc-700 transition-colors text-sm ${
            option.code === lang ? 'bg-zinc-50 dark:bg-zinc-700/50 text-orange-600 dark:text-orange-400' : 'text-zinc-700 dark:text-zinc-300'
          }`}
          data-language={option.code}
          type="button"
        >
          <img
            src={`https://flagcdn.com/w20/${option.flagCode.toLowerCase()}.png`}
            alt={option.name}
            width="20"
            height="15"
            class="rounded-sm"
          />
          <span>{option.name}</span>
        </button>
      ))}
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const button = document.getElementById('language-button');
    const dropdown = document.getElementById('language-dropdown');
    const arrow = document.getElementById('language-arrow');
    const languageButtons = document.querySelectorAll('[data-language]');
    let isOpen = false;

    function toggleDropdown() {
      isOpen = !isOpen;
      if (isOpen) {
        dropdown?.classList.remove('opacity-0', 'invisible', 'scale-95');
        dropdown?.classList.add('opacity-100', 'visible', 'scale-100');
        arrow?.classList.add('rotate-180');
      } else {
        dropdown?.classList.add('opacity-0', 'invisible', 'scale-95');
        dropdown?.classList.remove('opacity-100', 'visible', 'scale-100');
        arrow?.classList.remove('rotate-180');
      }
    }

    function closeDropdown() {
      if (isOpen) {
        isOpen = false;
        dropdown?.classList.add('opacity-0', 'invisible', 'scale-95');
        dropdown?.classList.remove('opacity-100', 'visible', 'scale-100');
        arrow?.classList.remove('rotate-180');
      }
    }

    button?.addEventListener('click', (e) => {
      e.preventDefault();
      toggleDropdown();
    });

    // Handle language selection
    languageButtons.forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        const lang = (e.currentTarget as HTMLElement).getAttribute('data-language');
        if (lang) {
          localStorage.setItem('i18nextLng', lang);
          // In a real application, you'd navigate to the appropriate language route
          // For now, we'll just reload the page
          window.location.reload();
        }
        closeDropdown();
      });
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      if (!button?.contains(target) && !dropdown?.contains(target)) {
        closeDropdown();
      }
    });

    // Close dropdown on Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeDropdown();
      }
    });
  });
</script>