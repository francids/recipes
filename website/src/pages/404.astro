---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';
import ScrollTopButton from '../components/ScrollTopButton.astro';
import { t } from '../utils/i18n';

const lang = 'es'; // TODO: This should be dynamic based on routing or detection
---

<Layout title="Page Not Found - The Recipes">
  <Navbar lang={lang} />
  <div class="flex flex-col bg-white dark:bg-zinc-900 relative min-h-screen">
    <div class="flex-1 min-h-screen relative z-10">
      <div class="flex flex-col items-center justify-center min-h-screen pt-20 pb-16 px-4">
        <div class="text-center max-w-2xl mb-32 mx-auto animate-on-scroll transition-all duration-300 ease-out">
          <h1 class="text-6xl md:text-7xl font-bold text-zinc-900 dark:text-white mb-6 selection:bg-orange-500/25">
            {t("title", lang, "NotFound") || "404"}
          </h1>
          <h2 class="text-2xl md:text-3xl font-semibold text-zinc-700 dark:text-zinc-300 mb-4 selection:bg-orange-500/25">
            {t("subtitle", lang, "NotFound") || "Página no encontrada"}
          </h2>
          <p class="text-lg text-zinc-600 dark:text-zinc-400 mb-8 leading-relaxed selection:bg-orange-500/25">
            {t("description", lang, "NotFound") || "La página que buscas no existe o ha sido movida."}
          </p>
          <a 
            href="/"
            class="inline-flex justify-center items-center gap-2 px-8 py-4 rounded-md bg-main text-white font-semibold text-lg transition-all duration-300 active:scale-95 hover:bg-orange-500 hover:text-white select-none"
          >
            Volver al inicio
          </a>
        </div>
      </div>
    </div>
  </div>
  <Footer lang={lang} />
  <ScrollTopButton />
</Layout>

<script>
  // Add animation functionality
  document.addEventListener('DOMContentLoaded', () => {
    const animatedElements = document.querySelectorAll('.animate-on-scroll');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.1,
      triggerOnce: true
    });

    animatedElements.forEach(el => observer.observe(el));
  });
</script>